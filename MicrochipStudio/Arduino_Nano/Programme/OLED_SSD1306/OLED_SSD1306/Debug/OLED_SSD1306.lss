
OLED_SSD1306.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000010a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000102e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000010a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108c  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f8  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000922  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000344c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  0000362c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fb4  00000000  00000000  00003b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004b3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__ctors_end>
       4:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
       8:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
       c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      10:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      14:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      18:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      1c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      20:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      24:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      28:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      2c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      30:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      34:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      38:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      3c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      40:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      44:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      48:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      4c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      50:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      54:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      58:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      5c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      60:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>
      64:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	25 38       	cpi	r18, 0x85	; 133
      6a:	69 00       	.word	0x0069	; ????

0000006c <__c.2234>:
      6c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
	...

0000007d <__c.2232>:
      7d:	2a 20 55 6c 72 69 63 68 20 52 61 64 69 67 20 2a     * Ulrich Radig *
	...

0000008e <__c.2230>:
      8e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
	...

0000009f <ssd1306_init_cmd>:
      9f:	ae e3 20 00 b0 c8 00 10 40 a4 a1 a6 81 ff a8 3f     .. .....@......?
      af:	d3 00 d5 f0 d9 22 da 12 db 20 8d 14 af              ....."... ...

000000bc <font>:
	...
      c4:	7e 81 95 b1 b1 95 81 7e 7e ff eb cf cf eb ff 7e     ~......~~......~
      d4:	0e 1f 3f 7e 3f 1f 0e 00 08 1c 3e 7f 3e 1c 08 00     ..?~?.....>.>...
      e4:	38 3a 9f ff 9f 3a 38 00 10 38 bc ff bc 38 10 00     8:...:8..8...8..
	...
     114:	70 f8 88 88 fd 7f 07 0f 00 4e 5f f1 f1 5f 4e 00     p........N_.._N.
	...
     12c:	c0 ff 7f 05 05 65 7f 3f 99 5a 3c e7 e7 3c 5a 99     .....e.?.Z<..<Z.
     13c:	7f 3e 3e 1c 1c 08 08 00 08 08 1c 1c 3e 3e 7f 00     .>>.........>>..
     14c:	00 24 66 ff ff 66 24 00 00 5f 5f 00 00 5f 5f 00     .$f..f$..__..__.
     15c:	06 0f 09 7f 7f 01 7f 7f da bf a5 a5 fd 59 03 02     .............Y..
     16c:	00 70 70 70 70 70 70 00 80 94 b6 ff ff b6 94 80     .pppppp.........
     17c:	00 04 06 7f 7f 06 04 00 00 10 30 7f 7f 30 10 00     ..........0..0..
     18c:	08 08 08 2a 3e 1c 08 00 08 1c 3e 2a 08 08 08 00     ...*>.....>*....
     19c:	3c 3c 20 20 20 20 20 00 08 1c 3e 08 08 3e 1c 08     <<     ...>..>..
     1ac:	30 38 3c 3e 3e 3c 38 30 06 0e 1e 3e 3e 1e 0e 06     08<>><80...>>...
	...
     1c4:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     1d4:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     1e4:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     1f4:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     204:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     214:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     224:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     234:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     244:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     254:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     264:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     274:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     284:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     294:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     2a4:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     2b4:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     2c4:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     2d4:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     2e4:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     2f4:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     304:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     314:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     324:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     334:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     344:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     354:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     364:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     374:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     384:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     394:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     3a4:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     3b4:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     3c4:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     3d4:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     3e4:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     3f4:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     404:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     414:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     424:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     434:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     444:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     454:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     464:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     474:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     484:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     494:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     4a4:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     4b4:	78 7c 46 43 46 7c 78 00 1e bf e1 61 33 12 00 00     x|FCF|x....a3...
     4c4:	3a 7a 40 40 7a 7a 40 00 38 7c 56 57 5d 18 00 00     :z@@zz@.8|VW]...
     4d4:	02 23 75 55 55 7d 7b 42 21 75 54 54 7d 79 40 00     .#uUU}{B!uTT}y@.
     4e4:	20 75 57 56 7c 78 40 00 00 22 77 55 55 7f 7a 40      uWV|x@.."wUU.z@
     4f4:	1c be e2 62 36 14 00 00 02 3b 7d 55 55 5d 1b 02     ...b6....;}UU]..
     504:	39 7d 54 54 5d 19 00 00 38 7d 57 56 5c 18 00 00     9}TT]...8}WV\...
     514:	01 45 7c 7c 41 01 00 00 02 03 45 7d 7d 43 02 00     .E||A.....E}}C..
     524:	00 45 7f 7e 40 00 00 00 79 7d 26 26 7d 79 00 00     .E.~@...y}&&}y..
     534:	70 7a 2d 2d 7a 70 00 00 44 7c 7e 57 55 44 00 00     pz--zp..D|~WUD..
     544:	20 74 54 54 7c 7c 54 54 7c 7e 0b 09 7f 7f 49 00      tTT||TT|~....I.
     554:	32 7b 49 49 7b 32 00 00 32 7a 48 48 7a 32 00 00     2{II{2..2zHHz2..
     564:	30 79 4b 4a 78 30 00 00 3a 7b 41 41 7b 7a 40 00     0yKJx0..:{AA{z@.
     574:	38 79 43 42 78 78 40 00 ba ba a0 a0 fa 7a 00 00     8yCBxx@......z..
     584:	39 7d 44 44 44 7d 39 00 3d 7d 40 40 7d 3d 00 00     9}DDD}9.=}@@}=..
     594:	38 7c 64 54 4c 7c 38 00 68 7e 7f 49 43 66 20 00     8|dTL|8.h~.ICf .
     5a4:	5c 3e 73 49 67 3e 1d 00 44 6c 38 38 6c 44 00 00     \>sIg>..Dl88lD..
     5b4:	40 c8 88 fe 7f 09 0b 02 20 74 56 57 7d 78 40 00     @....... tVW}x@.
     5c4:	00 44 7e 7f 41 00 00 00 30 78 48 4a 7b 31 00 00     .D~.A...0xHJ{1..
     5d4:	38 78 40 42 7b 79 40 00 7a 7b 09 0b 7a 73 01 00     8x@B{y@.z{..zs..
     5e4:	7a 7b 19 33 7a 7b 01 00 00 26 2f 29 2f 2f 28 00     z{.3z{...&/)//(.
     5f4:	00 26 2f 29 29 2f 26 00 30 78 4d 45 60 20 00 00     .&/))/&.0xME` ..
     604:	1c 22 7d 4b 5b 65 22 1c 08 08 08 08 38 38 00 00     ."}K[e".....88..
     614:	61 3f 1f cc ee ab b9 90 61 3f 1f 4c 66 73 d9 f8     a?......a?.Lfs..
     624:	00 00 60 fa fa 60 00 00 08 1c 36 22 08 1c 36 22     ..`..`....6"..6"
     634:	22 36 1c 08 22 36 1c 08 aa 00 55 00 aa 00 55 00     "6.."6....U...U.
     644:	aa 55 aa 55 aa 55 aa 55 55 ff aa ff 55 ff aa ff     .U.U.U.UU...U...
     654:	00 00 00 ff ff 00 00 00 10 10 10 ff ff 00 00 00     ................
     664:	70 78 2c 2e 7b 71 00 00 72 79 2d 2d 79 72 00 00     px,.{q..ry--yr..
     674:	71 7b 2e 2c 78 70 00 00 1c 22 5d 55 55 41 22 1c     q{.,xp..."]UUA".
     684:	14 14 f7 f7 00 ff ff 00 00 00 ff ff 00 ff ff 00     ................
     694:	14 14 f4 f4 04 fc fc 00 14 14 17 17 10 1f 1f 00     ................
     6a4:	18 3c 24 e7 e7 24 24 00 2b 2f fc fc 2f 2b 00 00     .<$..$$.+/../+..
     6b4:	10 10 10 f0 f0 00 00 00 00 00 00 1f 1f 10 10 10     ................
     6c4:	10 10 10 1f 1f 10 10 10 10 10 10 f0 f0 10 10 10     ................
     6d4:	00 00 00 ff ff 10 10 10 10 10 10 10 10 10 10 10     ................
     6e4:	10 10 10 ff ff 10 10 10 22 77 55 57 7e 7b 41 00     ........"wUW~{A.
     6f4:	72 7b 2d 2f 7a 73 01 00 00 00 1f 1f 10 17 17 14     r{-/zs..........
     704:	00 00 fc fc 04 f4 f4 14 14 14 17 17 10 17 17 14     ................
     714:	14 14 f4 f4 04 f4 f4 14 00 00 ff ff 00 f7 f7 14     ................
     724:	14 14 14 14 14 14 14 14 14 14 f7 f7 00 f7 f7 14     ................
     734:	66 3c 3c 24 3c 3c 66 00 05 27 72 57 7d 38 00 00     f<<$<<f..'rW}8..
     744:	49 7f 7f 49 63 7f 1c 00 46 7d 7d 55 55 46 00 00     I..Ic...F}}UUF..
     754:	45 7d 7c 54 55 45 00 00 44 7d 7f 56 54 44 00 00     E}|TUE..D}.VTD..
     764:	0a 0e 08 00 00 00 00 00 00 44 7e 7f 45 00 00 00     .........D~.E...
     774:	02 45 7d 7d 45 02 00 00 01 45 7c 7c 45 01 00 00     .E}}E....E||E...
     784:	10 10 10 1f 1f 00 00 00 00 00 00 f0 f0 10 10 10     ................
     794:	ff ff ff ff ff ff ff ff f0 f0 f0 f0 f0 f0 f0 f0     ................
     7a4:	00 00 00 77 77 00 00 00 00 45 7f 7e 44 00 00 00     ...ww....E.~D...
     7b4:	0f 0f 0f 0f 0f 0f 0f 0f 38 7c 46 47 45 7c 38 00     ........8|FGE|8.
     7c4:	fc fe 2a 2a 3e 14 00 00 3a 7d 45 45 45 7d 3a 00     ..**>...:}EEE}:.
     7d4:	38 7c 45 47 46 7c 38 00 32 7b 49 4b 7a 33 01 00     8|EGF|8.2{IKz3..
     7e4:	3a 7f 45 47 46 7f 39 00 80 fe 7e 20 20 3e 1e 00     :.EGF.9...~  >..
     7f4:	42 7e 7e 54 1c 08 00 00 41 7f 7f 55 14 1c 08 00     B~~T....A..U....
     804:	3c 7c 42 43 7d 3c 00 00 3a 79 41 41 79 3a 00 00     <|BC}<..:yAAy:..
     814:	3c 7d 43 42 7c 3c 00 00 b8 b8 a2 a3 f9 78 00 00     <}CB|<.......x..
     824:	0c 5c 72 73 5d 0c 00 00 02 02 02 02 02 02 00 00     .\rs]...........
     834:	00 00 02 03 01 00 00 00 10 10 10 10 10 10 00 00     ................
     844:	44 44 5f 5f 44 44 00 00 28 28 28 28 28 28 00 00     DD__DD..((((((..
     854:	71 35 1f 4c 66 73 d9 f8 06 0f 09 7f 7f 01 7f 7f     q5.Lfs..........
     864:	da bf a5 a5 fd 59 03 02 08 08 6b 6b 08 08 00 00     .....Y....kk....
     874:	00 80 c0 40 00 00 00 00 00 06 0f 09 0f 06 00 00     ...@............
     884:	02 02 00 00 02 02 00 00 00 00 00 10 10 00 00 00     ................
     894:	00 12 13 1f 1f 10 10 00 00 11 15 15 1f 1f 0a 00     ................
     8a4:	00 19 1d 15 17 12 00 00 00 00 3c 3c 3c 3c 00 00     ..........<<<<..
	...

000008bc <__ctors_end>:
     8bc:	11 24       	eor	r1, r1
     8be:	1f be       	out	0x3f, r1	; 63
     8c0:	cf ef       	ldi	r28, 0xFF	; 255
     8c2:	d8 e0       	ldi	r29, 0x08	; 8
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	cd bf       	out	0x3d, r28	; 61

000008c8 <__do_clear_bss>:
     8c8:	21 e0       	ldi	r18, 0x01	; 1
     8ca:	a0 e0       	ldi	r26, 0x00	; 0
     8cc:	b1 e0       	ldi	r27, 0x01	; 1
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <.do_clear_bss_start>

000008d0 <.do_clear_bss_loop>:
     8d0:	1d 92       	st	X+, r1

000008d2 <.do_clear_bss_start>:
     8d2:	a3 30       	cpi	r26, 0x03	; 3
     8d4:	b2 07       	cpc	r27, r18
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <.do_clear_bss_loop>
     8d8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <main>
     8dc:	0c 94 15 08 	jmp	0x102a	; 0x102a <_exit>

000008e0 <__bad_interrupt>:
     8e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008e4 <main>:
#include <util/delay.h>
#include "oled_ssd1306.h"

int main(void)
{
	DDRB |= (1<<PB5);
     8e4:	25 9a       	sbi	0x04, 5	; 4
	oled_init();
     8e6:	0e 94 68 05 	call	0xad0	; 0xad0 <oled_init>
	oled_gotoxy(0,0);
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>

    while(1){
        for(uint32_t tmp = 1;tmp < 99999999; tmp++){
			oled_gotoxy(0,0);
			oled_write("****************");
     8f2:	0f 2e       	mov	r0, r31
     8f4:	fe e8       	ldi	r31, 0x8E	; 142
     8f6:	cf 2e       	mov	r12, r31
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	df 2e       	mov	r13, r31
     8fc:	f0 2d       	mov	r31, r0
			oled_gotoxy(0,1);
			oled_write("* Ulrich Radig *");
     8fe:	0f 2e       	mov	r0, r31
     900:	fd e7       	ldi	r31, 0x7D	; 125
     902:	ef 2e       	mov	r14, r31
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	ff 2e       	mov	r15, r31
     908:	f0 2d       	mov	r31, r0
			oled_gotoxy(0,2);
			oled_write("****************");
     90a:	0c e6       	ldi	r16, 0x6C	; 108
     90c:	10 e0       	ldi	r17, 0x00	; 0
			oled_font_size(1);
			oled_gotoxy(0,4);
			oled_write("%8i",tmp);	
     90e:	c8 e6       	ldi	r28, 0x68	; 104
     910:	d0 e0       	ldi	r29, 0x00	; 0
			oled_font_size(0);
			_delay_ms(100);
			PORTB ^= (1<<PB5);
     912:	68 94       	set
     914:	77 24       	eor	r7, r7
     916:	75 f8       	bld	r7, 5
	DDRB |= (1<<PB5);
	oled_init();
	oled_gotoxy(0,0);

    while(1){
        for(uint32_t tmp = 1;tmp < 99999999; tmp++){
     918:	81 2c       	mov	r8, r1
     91a:	91 2c       	mov	r9, r1
     91c:	54 01       	movw	r10, r8
     91e:	83 94       	inc	r8
			oled_gotoxy(0,0);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>
			oled_write("****************");
     928:	df 92       	push	r13
     92a:	cf 92       	push	r12
     92c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <oled_write_P>
			oled_gotoxy(0,1);
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>
			oled_write("* Ulrich Radig *");
     938:	ff 92       	push	r15
     93a:	ef 92       	push	r14
     93c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <oled_write_P>
			oled_gotoxy(0,2);
     940:	62 e0       	ldi	r22, 0x02	; 2
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>
			oled_write("****************");
     948:	1f 93       	push	r17
     94a:	0f 93       	push	r16
     94c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <oled_write_P>
			oled_font_size(1);
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 88 05 	call	0xb10	; 0xb10 <oled_font_size>
			oled_gotoxy(0,4);
     956:	64 e0       	ldi	r22, 0x04	; 4
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>
			oled_write("%8i",tmp);	
     95e:	bf 92       	push	r11
     960:	af 92       	push	r10
     962:	9f 92       	push	r9
     964:	8f 92       	push	r8
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <oled_write_P>
			oled_font_size(0);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 88 05 	call	0xb10	; 0xb10 <oled_font_size>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     974:	9f e7       	ldi	r25, 0x7F	; 127
     976:	29 ea       	ldi	r18, 0xA9	; 169
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	91 50       	subi	r25, 0x01	; 1
     97c:	20 40       	sbci	r18, 0x00	; 0
     97e:	80 40       	sbci	r24, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <__stack+0x7b>
     982:	00 c0       	rjmp	.+0      	; 0x984 <__stack+0x85>
     984:	00 00       	nop
			_delay_ms(100);
			PORTB ^= (1<<PB5);
     986:	85 b1       	in	r24, 0x05	; 5
     988:	87 25       	eor	r24, r7
     98a:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<PB5);
	oled_init();
	oled_gotoxy(0,0);

    while(1){
        for(uint32_t tmp = 1;tmp < 99999999; tmp++){
     98c:	9f ef       	ldi	r25, 0xFF	; 255
     98e:	89 1a       	sub	r8, r25
     990:	99 0a       	sbc	r9, r25
     992:	a9 0a       	sbc	r10, r25
     994:	b9 0a       	sbc	r11, r25
     996:	8d b7       	in	r24, 0x3d	; 61
     998:	9e b7       	in	r25, 0x3e	; 62
     99a:	0c 96       	adiw	r24, 0x0c	; 12
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	9e bf       	out	0x3e, r25	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	8d bf       	out	0x3d, r24	; 61
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	89 16       	cp	r8, r25
     9aa:	90 ee       	ldi	r25, 0xE0	; 224
     9ac:	99 06       	cpc	r9, r25
     9ae:	95 ef       	ldi	r25, 0xF5	; 245
     9b0:	a9 06       	cpc	r10, r25
     9b2:	95 e0       	ldi	r25, 0x05	; 5
     9b4:	b9 06       	cpc	r11, r25
     9b6:	09 f0       	breq	.+2      	; 0x9ba <__stack+0xbb>
     9b8:	b3 cf       	rjmp	.-154    	; 0x920 <__stack+0x21>
     9ba:	ae cf       	rjmp	.-164    	; 0x918 <__stack+0x19>

000009bc <i2c_init>:
CHARGE_BUMB_SETTING,	0x14, 
SET_DISPLAY_ON };

//***************************************************************************************
void i2c_init(void){
	I2C_PORT |= (1 << SDA_PIN | 1 << SCL_PIN);			//Port Pullup
     9bc:	88 b1       	in	r24, 0x08	; 8
     9be:	80 63       	ori	r24, 0x30	; 48
     9c0:	88 b9       	out	0x08, r24	; 8
	TWCR = 0;
     9c2:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	TWSR = 0;
     9c6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
     9ca:	87 e0       	ldi	r24, 0x07	; 7
     9cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     9d0:	2f eb       	ldi	r18, 0xBF	; 191
     9d2:	84 ed       	ldi	r24, 0xD4	; 212
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	21 50       	subi	r18, 0x01	; 1
     9d8:	80 40       	sbci	r24, 0x00	; 0
     9da:	90 40       	sbci	r25, 0x00	; 0
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <i2c_init+0x1a>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <i2c_init+0x24>
     9e0:	00 00       	nop
     9e2:	08 95       	ret

000009e4 <i2c_start>:
}

//***************************************************************************************
uint8_t i2c_start (void){
	uint8_t timeout = 0;
    TWCR = (1 << TWINT | 1 << TWSTA | 1 << TWEN);
     9e4:	84 ea       	ldi	r24, 0xA4	; 164
     9e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while(!(TWCR & (1<<TWINT))){
     9ea:	86 e6       	ldi	r24, 0x66	; 102
     9ec:	ec eb       	ldi	r30, 0xBC	; 188
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <i2c_start+0x12>
     9f2:	81 50       	subi	r24, 0x01	; 1
	    if((timeout++) > 100) return 1;
     9f4:	a1 f0       	breq	.+40     	; 0xa1e <i2c_start+0x3a>

//***************************************************************************************
uint8_t i2c_start (void){
	uint8_t timeout = 0;
    TWCR = (1 << TWINT | 1 << TWSTA | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
     9f6:	90 81       	ld	r25, Z
     9f8:	99 23       	and	r25, r25
     9fa:	dc f7       	brge	.-10     	; 0x9f2 <i2c_start+0xe>
	    if((timeout++) > 100) return 1;
    }
    TWDR = OLED_I2C_ADDR;
     9fc:	88 e7       	ldi	r24, 0x78	; 120
     9fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT | 1 << TWEN);
     a02:	84 e8       	ldi	r24, 0x84	; 132
     a04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	timeout = 0;
    while(!(TWCR & (1<<TWINT))){
     a08:	86 e6       	ldi	r24, 0x66	; 102
     a0a:	ec eb       	ldi	r30, 0xBC	; 188
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <i2c_start+0x30>
     a10:	81 50       	subi	r24, 0x01	; 1
	    if((timeout++) > 100) return 1;
     a12:	39 f0       	breq	.+14     	; 0xa22 <i2c_start+0x3e>
	    if((timeout++) > 100) return 1;
    }
    TWDR = OLED_I2C_ADDR;
    TWCR = (1 << TWINT | 1 << TWEN);
	timeout = 0;
    while(!(TWCR & (1<<TWINT))){
     a14:	90 81       	ld	r25, Z
     a16:	99 23       	and	r25, r25
     a18:	dc f7       	brge	.-10     	; 0xa10 <i2c_start+0x2c>
	    if((timeout++) > 100) return 1;
    }
	return 0;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	08 95       	ret
//***************************************************************************************
uint8_t i2c_start (void){
	uint8_t timeout = 0;
    TWCR = (1 << TWINT | 1 << TWSTA | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
	    if((timeout++) > 100) return 1;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	08 95       	ret
    }
    TWDR = OLED_I2C_ADDR;
    TWCR = (1 << TWINT | 1 << TWEN);
	timeout = 0;
    while(!(TWCR & (1<<TWINT))){
	    if((timeout++) > 100) return 1;
     a22:	81 e0       	ldi	r24, 0x01	; 1
    }
	return 0;
}
     a24:	08 95       	ret

00000a26 <i2c_byte>:

//***************************************************************************************
uint8_t i2c_byte (uint8_t byte){  
	uint8_t timeout = 0;
    TWDR = byte;
     a26:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    TWCR = (1 << TWINT | 1 << TWEN);
     a2a:	84 e8       	ldi	r24, 0x84	; 132
     a2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    while(!(TWCR & (1<<TWINT))){
     a30:	86 e6       	ldi	r24, 0x66	; 102
     a32:	ec eb       	ldi	r30, 0xBC	; 188
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <i2c_byte+0x16>
     a38:	81 50       	subi	r24, 0x01	; 1
		if((timeout++) > 100) return 1;
     a3a:	29 f0       	breq	.+10     	; 0xa46 <i2c_byte+0x20>
//***************************************************************************************
uint8_t i2c_byte (uint8_t byte){  
	uint8_t timeout = 0;
    TWDR = byte;
    TWCR = (1 << TWINT | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
     a3c:	90 81       	ld	r25, Z
     a3e:	99 23       	and	r25, r25
     a40:	dc f7       	brge	.-10     	; 0xa38 <i2c_byte+0x12>
		if((timeout++) > 100) return 1;
	}
	return 0;
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 95       	ret
uint8_t i2c_byte (uint8_t byte){  
	uint8_t timeout = 0;
    TWDR = byte;
    TWCR = (1 << TWINT | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
		if((timeout++) > 100) return 1;
     a46:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
     a48:	08 95       	ret

00000a4a <i2c_stop>:

//***************************************************************************************
void i2c_stop (void){
    TWCR = (1 << TWINT | 1 << TWSTO | 1 << TWEN);
     a4a:	ec eb       	ldi	r30, 0xBC	; 188
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	84 e9       	ldi	r24, 0x94	; 148
     a50:	80 83       	st	Z, r24
	TWCR = 0;
     a52:	10 82       	st	Z, r1
     a54:	08 95       	ret

00000a56 <oled_gotoxy>:
    i2c_stop();
	oled_gotoxy(0,0);
}

//***************************************************************************************
void oled_gotoxy (uint8_t x, uint8_t y){
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	c8 2f       	mov	r28, r24
     a5c:	d6 2f       	mov	r29, r22
	oled_x = x;
     a5e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <oled_x>
	oled_y = y;
     a62:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <oled_y>
    i2c_start();		
     a66:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <i2c_start>
    i2c_byte(COMMAND);
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
    i2c_byte(SET_PAGE_START|y);
     a70:	8d 2f       	mov	r24, r29
     a72:	80 6b       	ori	r24, 0xB0	; 176
     a74:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
	i2c_byte(SET_COLUMN_ADDRESS);
     a78:	81 e2       	ldi	r24, 0x21	; 33
     a7a:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
    i2c_byte(x * 8);
     a7e:	8c 2f       	mov	r24, r28
     a80:	88 0f       	add	r24, r24
     a82:	88 0f       	add	r24, r24
     a84:	88 0f       	add	r24, r24
     a86:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
	i2c_byte(SET_DISPLAY_START_LINE|0x3F);
     a8a:	8f e7       	ldi	r24, 0x7F	; 127
     a8c:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
    i2c_stop();			
     a90:	0e 94 25 05 	call	0xa4a	; 0xa4a <i2c_stop>
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <oled_clear_screen>:
	i2c_stop();
    oled_clear_screen();
}

//***************************************************************************************
void oled_clear_screen (void){
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
	oled_gotoxy(0,0);
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>
	i2c_start();
     aa6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <i2c_start>
    i2c_byte(DATA);
     aaa:	80 e4       	ldi	r24, 0x40	; 64
     aac:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
     ab0:	c0 e0       	ldi	r28, 0x00	; 0
     ab2:	d8 e0       	ldi	r29, 0x08	; 8
    for (uint16_t i = 0; i < 128<<4 ; i++) {	// 128 * (64 / Byte) 
        i2c_byte(0);	
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
     aba:	21 97       	sbiw	r28, 0x01	; 1
//***************************************************************************************
void oled_clear_screen (void){
	oled_gotoxy(0,0);
	i2c_start();
    i2c_byte(DATA);
    for (uint16_t i = 0; i < 128<<4 ; i++) {	// 128 * (64 / Byte) 
     abc:	d9 f7       	brne	.-10     	; 0xab4 <oled_clear_screen+0x1a>
        i2c_byte(0);	
    }
    i2c_stop();
     abe:	0e 94 25 05 	call	0xa4a	; 0xa4a <i2c_stop>
	oled_gotoxy(0,0);
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>
}
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <oled_init>:
    TWCR = (1 << TWINT | 1 << TWSTO | 1 << TWEN);
	TWCR = 0;
}

//***************************************************************************************
void oled_init (void){
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
	i2c_init();
     ad8:	0e 94 de 04 	call	0x9bc	; 0x9bc <i2c_init>
	i2c_start();
     adc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <i2c_start>
	i2c_byte(COMMAND);
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
     ae6:	cf e9       	ldi	r28, 0x9F	; 159
     ae8:	d0 e0       	ldi	r29, 0x00	; 0
     aea:	0c eb       	ldi	r16, 0xBC	; 188
     aec:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t tmp = 0; tmp< sizeof(ssd1306_init_cmd); tmp++) {	
		i2c_byte(pgm_read_byte(&ssd1306_init_cmd[tmp]));
     aee:	fe 01       	movw	r30, r28
     af0:	84 91       	lpm	r24, Z
     af2:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
     af6:	21 96       	adiw	r28, 0x01	; 1
//***************************************************************************************
void oled_init (void){
	i2c_init();
	i2c_start();
	i2c_byte(COMMAND);
	for (uint8_t tmp = 0; tmp< sizeof(ssd1306_init_cmd); tmp++) {	
     af8:	c0 17       	cp	r28, r16
     afa:	d1 07       	cpc	r29, r17
     afc:	c1 f7       	brne	.-16     	; 0xaee <oled_init+0x1e>
		i2c_byte(pgm_read_byte(&ssd1306_init_cmd[tmp]));
	}
	i2c_stop();
     afe:	0e 94 25 05 	call	0xa4a	; 0xa4a <i2c_stop>
    oled_clear_screen();
     b02:	0e 94 4d 05 	call	0xa9a	; 0xa9a <oled_clear_screen>
}
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	08 95       	ret

00000b10 <oled_font_size>:
    i2c_stop();			
}

//***************************************************************************************
void oled_font_size (uint8_t byte){
	font_size = byte;
     b10:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     b14:	08 95       	ret

00000b16 <oled_write_char>:
}

//***************************************************************************************
void oled_write_char (char c){
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	08 2f       	mov	r16, r24
	if(font_size != 0){		
     b2e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     b32:	88 23       	and	r24, r24
     b34:	09 f4       	brne	.+2      	; 0xb38 <oled_write_char+0x22>
     b36:	99 c0       	rjmp	.+306    	; 0xc6a <oled_write_char+0x154>
		uint8_t tmp = 0;
		oled_gotoxy(oled_x,oled_y);
     b38:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <oled_y>
     b3c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
     b40:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>
		i2c_start();
     b44:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <i2c_start>
		i2c_byte(DATA);
     b48:	80 e4       	ldi	r24, 0x40	; 64
     b4a:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
     b4e:	c0 2f       	mov	r28, r16
     b50:	d0 e0       	ldi	r29, 0x00	; 0
     b52:	8e 01       	movw	r16, r28
     b54:	00 0f       	add	r16, r16
     b56:	11 1f       	adc	r17, r17
     b58:	00 0f       	add	r16, r16
     b5a:	11 1f       	adc	r17, r17
     b5c:	00 0f       	add	r16, r16
     b5e:	11 1f       	adc	r17, r17
     b60:	04 54       	subi	r16, 0x44	; 68
     b62:	1f 4f       	sbci	r17, 0xFF	; 255
     b64:	cc 0f       	add	r28, r28
     b66:	dd 1f       	adc	r29, r29
     b68:	cc 0f       	add	r28, r28
     b6a:	dd 1f       	adc	r29, r29
     b6c:	cc 0f       	add	r28, r28
     b6e:	dd 1f       	adc	r29, r29
     b70:	cc 53       	subi	r28, 0x3C	; 60
     b72:	df 4f       	sbci	r29, 0xFF	; 255
     b74:	68 01       	movw	r12, r16
		for (uint8_t count = 0; count < 8; count++){
			tmp = pgm_read_byte(&font[(unsigned char)c][count]);
     b76:	f6 01       	movw	r30, r12
     b78:	24 91       	lpm	r18, Z
			tmp = tmp & 0x0f;
			tmp = ((tmp&0x01)*3)+(((tmp&0x02)<<1)*3)+(((tmp&0x04)<<2)*3)+(((tmp&0x08)<<3)*3);
     b7a:	82 2f       	mov	r24, r18
     b7c:	82 70       	andi	r24, 0x02	; 2
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	20 fb       	bst	r18, 0
     b86:	aa 24       	eor	r10, r10
     b88:	a0 f8       	bld	r10, 0
     b8a:	b1 2c       	mov	r11, r1
     b8c:	8a 0d       	add	r24, r10
     b8e:	9b 1d       	adc	r25, r11
     b90:	42 2f       	mov	r20, r18
     b92:	44 70       	andi	r20, 0x04	; 4
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	44 0f       	add	r20, r20
     b98:	55 1f       	adc	r21, r21
     b9a:	44 0f       	add	r20, r20
     b9c:	55 1f       	adc	r21, r21
     b9e:	84 0f       	add	r24, r20
     ba0:	95 1f       	adc	r25, r21
     ba2:	28 70       	andi	r18, 0x08	; 8
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	22 0f       	add	r18, r18
     ba8:	33 1f       	adc	r19, r19
     baa:	22 0f       	add	r18, r18
     bac:	33 1f       	adc	r19, r19
     bae:	22 0f       	add	r18, r18
     bb0:	33 1f       	adc	r19, r19
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	98 2e       	mov	r9, r24
     bb8:	99 0c       	add	r9, r9
     bba:	98 0e       	add	r9, r24
			i2c_byte(tmp);
     bbc:	89 2d       	mov	r24, r9
     bbe:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
			i2c_byte(tmp);
     bc2:	89 2d       	mov	r24, r9
     bc4:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
     bc8:	ff ef       	ldi	r31, 0xFF	; 255
     bca:	cf 1a       	sub	r12, r31
     bcc:	df 0a       	sbc	r13, r31
	if(font_size != 0){		
		uint8_t tmp = 0;
		oled_gotoxy(oled_x,oled_y);
		i2c_start();
		i2c_byte(DATA);
		for (uint8_t count = 0; count < 8; count++){
     bce:	cc 16       	cp	r12, r28
     bd0:	dd 06       	cpc	r13, r29
     bd2:	89 f6       	brne	.-94     	; 0xb76 <oled_write_char+0x60>
			tmp = tmp & 0x0f;
			tmp = ((tmp&0x01)*3)+(((tmp&0x02)<<1)*3)+(((tmp&0x04)<<2)*3)+(((tmp&0x08)<<3)*3);
			i2c_byte(tmp);
			i2c_byte(tmp);
		}
		i2c_stop();
     bd4:	0e 94 25 05 	call	0xa4a	; 0xa4a <i2c_stop>
		oled_gotoxy(oled_x,oled_y + 1);
     bd8:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <oled_y>
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
     be2:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>
		i2c_start();
     be6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <i2c_start>
		i2c_byte(DATA);
     bea:	80 e4       	ldi	r24, 0x40	; 64
     bec:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
		for (uint8_t count = 0; count < 8; count++){
			tmp = pgm_read_byte(&font[(unsigned char)c][count]);
     bf0:	f8 01       	movw	r30, r16
     bf2:	24 91       	lpm	r18, Z
			tmp = (tmp & 0xf0)>>4;
     bf4:	22 95       	swap	r18
     bf6:	2f 70       	andi	r18, 0x0F	; 15
			tmp = ((tmp&0x01)*3)+(((tmp&0x02)<<1)*3)+(((tmp&0x04)<<2)*3)+(((tmp&0x08)<<3)*3);
     bf8:	82 2f       	mov	r24, r18
     bfa:	82 70       	andi	r24, 0x02	; 2
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	20 fb       	bst	r18, 0
     c04:	ee 24       	eor	r14, r14
     c06:	e0 f8       	bld	r14, 0
     c08:	f1 2c       	mov	r15, r1
     c0a:	8e 0d       	add	r24, r14
     c0c:	9f 1d       	adc	r25, r15
     c0e:	42 2f       	mov	r20, r18
     c10:	44 70       	andi	r20, 0x04	; 4
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	44 0f       	add	r20, r20
     c16:	55 1f       	adc	r21, r21
     c18:	44 0f       	add	r20, r20
     c1a:	55 1f       	adc	r21, r21
     c1c:	84 0f       	add	r24, r20
     c1e:	95 1f       	adc	r25, r21
     c20:	28 70       	andi	r18, 0x08	; 8
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	22 0f       	add	r18, r18
     c26:	33 1f       	adc	r19, r19
     c28:	22 0f       	add	r18, r18
     c2a:	33 1f       	adc	r19, r19
     c2c:	22 0f       	add	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	82 0f       	add	r24, r18
     c32:	93 1f       	adc	r25, r19
     c34:	d8 2e       	mov	r13, r24
     c36:	dd 0c       	add	r13, r13
     c38:	d8 0e       	add	r13, r24
			i2c_byte(tmp);
     c3a:	8d 2d       	mov	r24, r13
     c3c:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
			i2c_byte(tmp);
     c40:	8d 2d       	mov	r24, r13
     c42:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
     c46:	0f 5f       	subi	r16, 0xFF	; 255
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		i2c_stop();
		oled_gotoxy(oled_x,oled_y + 1);
		i2c_start();
		i2c_byte(DATA);
		for (uint8_t count = 0; count < 8; count++){
     c4a:	0c 17       	cp	r16, r28
     c4c:	1d 07       	cpc	r17, r29
     c4e:	81 f6       	brne	.-96     	; 0xbf0 <oled_write_char+0xda>
			tmp = (tmp & 0xf0)>>4;
			tmp = ((tmp&0x01)*3)+(((tmp&0x02)<<1)*3)+(((tmp&0x04)<<2)*3)+(((tmp&0x08)<<3)*3);
			i2c_byte(tmp);
			i2c_byte(tmp);
		}
		i2c_stop();
     c50:	0e 94 25 05 	call	0xa4a	; 0xa4a <i2c_stop>
		oled_x +=2;
     c54:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
     c58:	8e 5f       	subi	r24, 0xFE	; 254
     c5a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <oled_x>
		oled_y -=1;
     c5e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <oled_y>
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <oled_y>
     c68:	2c c0       	rjmp	.+88     	; 0xcc2 <oled_write_char+0x1ac>
	}else{
		oled_gotoxy(oled_x,oled_y);
     c6a:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <oled_y>
     c6e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
     c72:	0e 94 2b 05 	call	0xa56	; 0xa56 <oled_gotoxy>
		i2c_start();
     c76:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <i2c_start>
		i2c_byte(DATA);
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
     c80:	10 e0       	ldi	r17, 0x00	; 0
     c82:	e8 01       	movw	r28, r16
     c84:	cc 0f       	add	r28, r28
     c86:	dd 1f       	adc	r29, r29
     c88:	cc 0f       	add	r28, r28
     c8a:	dd 1f       	adc	r29, r29
     c8c:	cc 0f       	add	r28, r28
     c8e:	dd 1f       	adc	r29, r29
     c90:	c4 54       	subi	r28, 0x44	; 68
     c92:	df 4f       	sbci	r29, 0xFF	; 255
     c94:	00 0f       	add	r16, r16
     c96:	11 1f       	adc	r17, r17
     c98:	00 0f       	add	r16, r16
     c9a:	11 1f       	adc	r17, r17
     c9c:	00 0f       	add	r16, r16
     c9e:	11 1f       	adc	r17, r17
     ca0:	0c 53       	subi	r16, 0x3C	; 60
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
		for (uint8_t count = 0; count < 8; count++){
			i2c_byte(pgm_read_byte(&font[(unsigned char)c][count]));
     ca4:	fe 01       	movw	r30, r28
     ca6:	84 91       	lpm	r24, Z
     ca8:	0e 94 13 05 	call	0xa26	; 0xa26 <i2c_byte>
     cac:	21 96       	adiw	r28, 0x01	; 1
		oled_y -=1;
	}else{
		oled_gotoxy(oled_x,oled_y);
		i2c_start();
		i2c_byte(DATA);
		for (uint8_t count = 0; count < 8; count++){
     cae:	c0 17       	cp	r28, r16
     cb0:	d1 07       	cpc	r29, r17
     cb2:	c1 f7       	brne	.-16     	; 0xca4 <oled_write_char+0x18e>
			i2c_byte(pgm_read_byte(&font[(unsigned char)c][count]));
		}
		i2c_stop();
     cb4:	0e 94 25 05 	call	0xa4a	; 0xa4a <i2c_stop>
		oled_x +=1;
     cb8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <oled_x>
	}
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	bf 90       	pop	r11
     cd4:	af 90       	pop	r10
     cd6:	9f 90       	pop	r9
     cd8:	08 95       	ret

00000cda <oled_write_str>:

//***************************************************************************************
void oled_write_str (char* str){
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ec 01       	movw	r28, r24
    while (*str) {
     ce0:	88 81       	ld	r24, Y
     ce2:	88 23       	and	r24, r24
     ce4:	31 f0       	breq	.+12     	; 0xcf2 <oled_write_str+0x18>
     ce6:	21 96       	adiw	r28, 0x01	; 1
        oled_write_char(*str++);
     ce8:	0e 94 8b 05 	call	0xb16	; 0xb16 <oled_write_char>
	}
}

//***************************************************************************************
void oled_write_str (char* str){
    while (*str) {
     cec:	89 91       	ld	r24, Y+
     cee:	81 11       	cpse	r24, r1
     cf0:	fb cf       	rjmp	.-10     	; 0xce8 <oled_write_str+0xe>
        oled_write_char(*str++);
    }
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <oled_write_P>:

//***************************************************************************************
void oled_write_P (const char *Buffer,...)
{
     cf8:	2f 92       	push	r2
     cfa:	3f 92       	push	r3
     cfc:	4f 92       	push	r4
     cfe:	5f 92       	push	r5
     d00:	6f 92       	push	r6
     d02:	7f 92       	push	r7
     d04:	8f 92       	push	r8
     d06:	9f 92       	push	r9
     d08:	af 92       	push	r10
     d0a:	bf 92       	push	r11
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	64 97       	sbiw	r28, 0x14	; 20
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	fe 01       	movw	r30, r28
     d2e:	b9 96       	adiw	r30, 0x29	; 41
     d30:	01 91       	ld	r16, Z+
     d32:	11 91       	ld	r17, Z+
	va_list ap;
	va_start (ap, Buffer);	
     d34:	5f 01       	movw	r10, r30
	
	int format_flag;
	char str_buffer[10];
	char str_null_buffer[10];
	char move = 0;
     d36:	81 2c       	mov	r8, r1
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
     d38:	21 2c       	mov	r2, r1
					int b=0;
     d3a:	61 2c       	mov	r6, r1
     d3c:	51 2c       	mov	r5, r1
						str_null_buffer[tmp] = '\0';
						strcat(str_null_buffer,str_buffer);
						strcpy(str_buffer,str_null_buffer);
						}
					oled_write_str (str_buffer);
					move =0;
     d3e:	71 2c       	mov	r7, r1
					while (str_buffer[b++] != 0){};
					b--;
					if (b<move){
						move -=b;
						for (tmp = 0;tmp<move;tmp++){
							str_null_buffer[tmp] = '0';
     d40:	0f 2e       	mov	r0, r31
     d42:	f0 e3       	ldi	r31, 0x30	; 48
     d44:	9f 2e       	mov	r9, r31
     d46:	f0 2d       	mov	r31, r0
					goto ConversionLoop;
				case 'o':
					Base = 8;
					goto ConversionLoop;
				case 'x':
					Base = 16;
     d48:	68 94       	set
     d4a:	44 24       	eor	r4, r4
     d4c:	44 f8       	bld	r4, 4
					break;
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
     d4e:	68 94       	set
     d50:	33 24       	eor	r3, r3
     d52:	33 f8       	bld	r3, 3
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <oled_write_P+0x60>
    for(;;){
		by = pgm_read_byte(Buffer++);
		if(by==0) break; // end of format string
            
		if (by == '%'){
            by = pgm_read_byte(Buffer++);
     d56:	86 01       	movw	r16, r12
	char by;
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;){
		by = pgm_read_byte(Buffer++);
     d58:	78 01       	movw	r14, r16
     d5a:	2f ef       	ldi	r18, 0xFF	; 255
     d5c:	e2 1a       	sub	r14, r18
     d5e:	f2 0a       	sbc	r15, r18
     d60:	f8 01       	movw	r30, r16
     d62:	84 91       	lpm	r24, Z
		if(by==0) break; // end of format string
     d64:	88 23       	and	r24, r24
     d66:	09 f4       	brne	.+2      	; 0xd6a <oled_write_P+0x72>
     d68:	cf c0       	rjmp	.+414    	; 0xf08 <oled_write_P+0x210>
            
		if (by == '%'){
     d6a:	85 32       	cpi	r24, 0x25	; 37
     d6c:	09 f0       	breq	.+2      	; 0xd70 <oled_write_P+0x78>
     d6e:	9f c0       	rjmp	.+318    	; 0xeae <oled_write_P+0x1b6>
            by = pgm_read_byte(Buffer++);
     d70:	68 01       	movw	r12, r16
     d72:	f2 e0       	ldi	r31, 0x02	; 2
     d74:	cf 0e       	add	r12, r31
     d76:	d1 1c       	adc	r13, r1
     d78:	f7 01       	movw	r30, r14
     d7a:	84 91       	lpm	r24, Z
			if (isdigit(by)>0){                   
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	20 53       	subi	r18, 0x30	; 48
     d82:	31 09       	sbc	r19, r1
     d84:	2a 30       	cpi	r18, 0x0A	; 10
     d86:	31 05       	cpc	r19, r1
     d88:	08 f0       	brcs	.+2      	; 0xd8c <oled_write_P+0x94>
     d8a:	9f c0       	rjmp	.+318    	; 0xeca <oled_write_P+0x1d2>
 				str_null_buffer[0] = by;
     d8c:	8b 87       	std	Y+11, r24	; 0x0b
				str_null_buffer[1] = '\0';
     d8e:	7c 86       	std	Y+12, r7	; 0x0c
				move = atoi(str_null_buffer);
     d90:	ce 01       	movw	r24, r28
     d92:	0b 96       	adiw	r24, 0x0b	; 11
     d94:	0e 94 9d 07 	call	0xf3a	; 0xf3a <atoi>
     d98:	88 2e       	mov	r8, r24
                by = pgm_read_byte(Buffer++);
     d9a:	0d 5f       	subi	r16, 0xFD	; 253
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	f6 01       	movw	r30, r12
     da0:	84 91       	lpm	r24, Z
				}

			switch (by){
     da2:	89 36       	cpi	r24, 0x69	; 105
     da4:	09 f4       	brne	.+2      	; 0xda8 <oled_write_P+0xb0>
     da6:	a4 c0       	rjmp	.+328    	; 0xef0 <oled_write_P+0x1f8>
     da8:	28 f4       	brcc	.+10     	; 0xdb4 <oled_write_P+0xbc>
     daa:	82 36       	cpi	r24, 0x62	; 98
     dac:	a9 f1       	breq	.+106    	; 0xe18 <oled_write_P+0x120>
     dae:	83 36       	cpi	r24, 0x63	; 99
     db0:	01 f1       	breq	.+64     	; 0xdf2 <oled_write_P+0xfa>
     db2:	d2 cf       	rjmp	.-92     	; 0xd58 <oled_write_P+0x60>
     db4:	83 37       	cpi	r24, 0x73	; 115
     db6:	31 f0       	breq	.+12     	; 0xdc4 <oled_write_P+0xcc>
     db8:	88 37       	cpi	r24, 0x78	; 120
     dba:	51 f1       	breq	.+84     	; 0xe10 <oled_write_P+0x118>
     dbc:	8f 36       	cpi	r24, 0x6F	; 111
     dbe:	61 f6       	brne	.-104    	; 0xd58 <oled_write_P+0x60>
     dc0:	23 c0       	rjmp	.+70     	; 0xe08 <oled_write_P+0x110>
    for(;;){
		by = pgm_read_byte(Buffer++);
		if(by==0) break; // end of format string
            
		if (by == '%'){
            by = pgm_read_byte(Buffer++);
     dc2:	86 01       	movw	r16, r12
                by = pgm_read_byte(Buffer++);
				}

			switch (by){
                case 's':
                    ptr = va_arg(ap,char *);
     dc4:	f5 01       	movw	r30, r10
     dc6:	01 90       	ld	r0, Z+
     dc8:	f0 81       	ld	r31, Z
     dca:	e0 2d       	mov	r30, r0
     dcc:	22 e0       	ldi	r18, 0x02	; 2
     dce:	a2 0e       	add	r10, r18
     dd0:	b1 1c       	adc	r11, r1
                    while(*ptr) { oled_write_char(*ptr++); }
     dd2:	80 81       	ld	r24, Z
     dd4:	88 23       	and	r24, r24
     dd6:	09 f4       	brne	.+2      	; 0xdda <oled_write_P+0xe2>
     dd8:	bf cf       	rjmp	.-130    	; 0xd58 <oled_write_P+0x60>
     dda:	7f 01       	movw	r14, r30
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	e9 1a       	sub	r14, r25
     de0:	f9 0a       	sbc	r15, r25
     de2:	0e 94 8b 05 	call	0xb16	; 0xb16 <oled_write_char>
     de6:	f7 01       	movw	r30, r14
     de8:	81 91       	ld	r24, Z+
     dea:	7f 01       	movw	r14, r30
     dec:	81 11       	cpse	r24, r1
     dee:	f9 cf       	rjmp	.-14     	; 0xde2 <oled_write_P+0xea>
     df0:	b3 cf       	rjmp	.-154    	; 0xd58 <oled_write_P+0x60>
            by = pgm_read_byte(Buffer++);
			if (isdigit(by)>0){                   
 				str_null_buffer[0] = by;
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
     df2:	68 01       	movw	r12, r16
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
     df4:	85 01       	movw	r16, r10
     df6:	0e 5f       	subi	r16, 0xFE	; 254
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
					oled_write_char (format_flag++);
     dfa:	f5 01       	movw	r30, r10
     dfc:	80 81       	ld	r24, Z
     dfe:	0e 94 8b 05 	call	0xb16	; 0xb16 <oled_write_char>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
     e02:	58 01       	movw	r10, r16
					oled_write_char (format_flag++);
					break;
     e04:	86 01       	movw	r16, r12
     e06:	a8 cf       	rjmp	.-176    	; 0xd58 <oled_write_P+0x60>
            by = pgm_read_byte(Buffer++);
			if (isdigit(by)>0){                   
 				str_null_buffer[0] = by;
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
     e08:	68 01       	movw	r12, r16
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
					goto ConversionLoop;
     e0a:	86 01       	movw	r16, r12
					break;
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
     e0c:	43 2d       	mov	r20, r3
					goto ConversionLoop;
     e0e:	74 c0       	rjmp	.+232    	; 0xef8 <oled_write_P+0x200>
            by = pgm_read_byte(Buffer++);
			if (isdigit(by)>0){                   
 				str_null_buffer[0] = by;
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
     e10:	68 01       	movw	r12, r16
     e12:	86 01       	movw	r16, r12
					goto ConversionLoop;
				case 'o':
					Base = 8;
					goto ConversionLoop;
				case 'x':
					Base = 16;
     e14:	44 2d       	mov	r20, r4
     e16:	70 c0       	rjmp	.+224    	; 0xef8 <oled_write_P+0x200>
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
     e18:	f5 01       	movw	r30, r10
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	f2 e0       	ldi	r31, 0x02	; 2
     e20:	af 0e       	add	r10, r31
     e22:	b1 1c       	adc	r11, r1
     e24:	42 e0       	ldi	r20, 0x02	; 2
     e26:	52 2d       	mov	r21, r2
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
     e28:	be 01       	movw	r22, r28
     e2a:	6f 5f       	subi	r22, 0xFF	; 255
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <itoa>
     e32:	fe 01       	movw	r30, r28
     e34:	31 96       	adiw	r30, 0x01	; 1
					int b=0;
     e36:	86 2d       	mov	r24, r6
     e38:	95 2d       	mov	r25, r5
					while (str_buffer[b++] != 0){};
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <oled_write_P+0x146>
     e3c:	ca 01       	movw	r24, r20
     e3e:	ac 01       	movw	r20, r24
     e40:	4f 5f       	subi	r20, 0xFF	; 255
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	21 91       	ld	r18, Z+
     e46:	21 11       	cpse	r18, r1
     e48:	f9 cf       	rjmp	.-14     	; 0xe3c <oled_write_P+0x144>
					b--;
					if (b<move){
     e4a:	28 2d       	mov	r18, r8
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	82 17       	cp	r24, r18
     e50:	93 07       	cpc	r25, r19
     e52:	3c f5       	brge	.+78     	; 0xea2 <oled_write_P+0x1aa>
						move -=b;
     e54:	88 1a       	sub	r8, r24
						for (tmp = 0;tmp<move;tmp++){
     e56:	28 2d       	mov	r18, r8
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	12 16       	cp	r1, r18
     e5c:	13 06       	cpc	r1, r19
     e5e:	54 f4       	brge	.+20     	; 0xe74 <oled_write_P+0x17c>
     e60:	fe 01       	movw	r30, r28
     e62:	3b 96       	adiw	r30, 0x0b	; 11
     e64:	cf 01       	movw	r24, r30
     e66:	88 0d       	add	r24, r8
     e68:	91 1d       	adc	r25, r1
							str_null_buffer[tmp] = '0';
     e6a:	91 92       	st	Z+, r9
					int b=0;
					while (str_buffer[b++] != 0){};
					b--;
					if (b<move){
						move -=b;
						for (tmp = 0;tmp<move;tmp++){
     e6c:	8e 17       	cp	r24, r30
     e6e:	9f 07       	cpc	r25, r31
     e70:	e1 f7       	brne	.-8      	; 0xe6a <oled_write_P+0x172>
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <oled_write_P+0x180>
     e74:	26 2d       	mov	r18, r6
     e76:	35 2d       	mov	r19, r5
							str_null_buffer[tmp] = '0';
							}
						//tmp ++;
						str_null_buffer[tmp] = '\0';
     e78:	eb e0       	ldi	r30, 0x0B	; 11
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	ec 0f       	add	r30, r28
     e7e:	fd 1f       	adc	r31, r29
     e80:	e2 0f       	add	r30, r18
     e82:	f3 1f       	adc	r31, r19
     e84:	10 82       	st	Z, r1
						strcat(str_null_buffer,str_buffer);
     e86:	be 01       	movw	r22, r28
     e88:	6f 5f       	subi	r22, 0xFF	; 255
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	ce 01       	movw	r24, r28
     e8e:	0b 96       	adiw	r24, 0x0b	; 11
     e90:	0e 94 bb 07 	call	0xf76	; 0xf76 <strcat>
						strcpy(str_buffer,str_null_buffer);
     e94:	be 01       	movw	r22, r28
     e96:	65 5f       	subi	r22, 0xF5	; 245
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <strcpy>
						}
					oled_write_str (str_buffer);
     ea2:	ce 01       	movw	r24, r28
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	0e 94 6d 06 	call	0xcda	; 0xcda <oled_write_str>
					move =0;
     eaa:	87 2c       	mov	r8, r7
					break;
     eac:	55 cf       	rjmp	.-342    	; 0xd58 <oled_write_P+0x60>
				}
		}else{
			oled_write_char (by);	
     eae:	0e 94 8b 05 	call	0xb16	; 0xb16 <oled_write_char>
	char by;
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;){
		by = pgm_read_byte(Buffer++);
     eb2:	87 01       	movw	r16, r14
     eb4:	51 cf       	rjmp	.-350    	; 0xd58 <oled_write_P+0x60>
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
     eb6:	f5 01       	movw	r30, r10
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	22 e0       	ldi	r18, 0x02	; 2
     ebe:	a2 0e       	add	r10, r18
     ec0:	b1 1c       	adc	r11, r1
    for(;;){
		by = pgm_read_byte(Buffer++);
		if(by==0) break; // end of format string
            
		if (by == '%'){
            by = pgm_read_byte(Buffer++);
     ec2:	86 01       	movw	r16, r12
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
     ec4:	42 e0       	ldi	r20, 0x02	; 2
     ec6:	52 2d       	mov	r21, r2
     ec8:	af cf       	rjmp	.-162    	; 0xe28 <oled_write_P+0x130>
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
				}

			switch (by){
     eca:	89 36       	cpi	r24, 0x69	; 105
     ecc:	99 f0       	breq	.+38     	; 0xef4 <oled_write_P+0x1fc>
     ece:	30 f4       	brcc	.+12     	; 0xedc <oled_write_P+0x1e4>
     ed0:	82 36       	cpi	r24, 0x62	; 98
     ed2:	89 f3       	breq	.-30     	; 0xeb6 <oled_write_P+0x1be>
     ed4:	83 36       	cpi	r24, 0x63	; 99
     ed6:	09 f4       	brne	.+2      	; 0xeda <oled_write_P+0x1e2>
     ed8:	8d cf       	rjmp	.-230    	; 0xdf4 <oled_write_P+0xfc>
     eda:	3d cf       	rjmp	.-390    	; 0xd56 <oled_write_P+0x5e>
     edc:	83 37       	cpi	r24, 0x73	; 115
     ede:	09 f4       	brne	.+2      	; 0xee2 <oled_write_P+0x1ea>
     ee0:	70 cf       	rjmp	.-288    	; 0xdc2 <oled_write_P+0xca>
     ee2:	88 37       	cpi	r24, 0x78	; 120
     ee4:	09 f4       	brne	.+2      	; 0xee8 <oled_write_P+0x1f0>
     ee6:	95 cf       	rjmp	.-214    	; 0xe12 <oled_write_P+0x11a>
     ee8:	8f 36       	cpi	r24, 0x6F	; 111
     eea:	09 f0       	breq	.+2      	; 0xeee <oled_write_P+0x1f6>
     eec:	34 cf       	rjmp	.-408    	; 0xd56 <oled_write_P+0x5e>
     eee:	8d cf       	rjmp	.-230    	; 0xe0a <oled_write_P+0x112>
					//Int to char
					format_flag = va_arg(ap,int);
					oled_write_char (format_flag++);
					break;
				case 'i':
					Base = 10;
     ef0:	4a e0       	ldi	r20, 0x0A	; 10
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <oled_write_P+0x200>
    for(;;){
		by = pgm_read_byte(Buffer++);
		if(by==0) break; // end of format string
            
		if (by == '%'){
            by = pgm_read_byte(Buffer++);
     ef4:	86 01       	movw	r16, r12
					//Int to char
					format_flag = va_arg(ap,int);
					oled_write_char (format_flag++);
					break;
				case 'i':
					Base = 10;
     ef6:	4a e0       	ldi	r20, 0x0A	; 10
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	f5 01       	movw	r30, r10
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	e2 e0       	ldi	r30, 0x02	; 2
     f02:	ae 0e       	add	r10, r30
     f04:	b1 1c       	adc	r11, r1
     f06:	90 cf       	rjmp	.-224    	; 0xe28 <oled_write_P+0x130>
		}else{
			oled_write_char (by);	
		}
	}
	va_end(ap);
}
     f08:	64 96       	adiw	r28, 0x14	; 20
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	bf 90       	pop	r11
     f26:	af 90       	pop	r10
     f28:	9f 90       	pop	r9
     f2a:	8f 90       	pop	r8
     f2c:	7f 90       	pop	r7
     f2e:	6f 90       	pop	r6
     f30:	5f 90       	pop	r5
     f32:	4f 90       	pop	r4
     f34:	3f 90       	pop	r3
     f36:	2f 90       	pop	r2
     f38:	08 95       	ret

00000f3a <atoi>:
     f3a:	fc 01       	movw	r30, r24
     f3c:	88 27       	eor	r24, r24
     f3e:	99 27       	eor	r25, r25
     f40:	e8 94       	clt
     f42:	21 91       	ld	r18, Z+
     f44:	20 32       	cpi	r18, 0x20	; 32
     f46:	e9 f3       	breq	.-6      	; 0xf42 <atoi+0x8>
     f48:	29 30       	cpi	r18, 0x09	; 9
     f4a:	10 f0       	brcs	.+4      	; 0xf50 <atoi+0x16>
     f4c:	2e 30       	cpi	r18, 0x0E	; 14
     f4e:	c8 f3       	brcs	.-14     	; 0xf42 <atoi+0x8>
     f50:	2b 32       	cpi	r18, 0x2B	; 43
     f52:	41 f0       	breq	.+16     	; 0xf64 <atoi+0x2a>
     f54:	2d 32       	cpi	r18, 0x2D	; 45
     f56:	39 f4       	brne	.+14     	; 0xf66 <atoi+0x2c>
     f58:	68 94       	set
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <atoi+0x2a>
     f5c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__mulhi_const_10>
     f60:	82 0f       	add	r24, r18
     f62:	91 1d       	adc	r25, r1
     f64:	21 91       	ld	r18, Z+
     f66:	20 53       	subi	r18, 0x30	; 48
     f68:	2a 30       	cpi	r18, 0x0A	; 10
     f6a:	c0 f3       	brcs	.-16     	; 0xf5c <atoi+0x22>
     f6c:	1e f4       	brtc	.+6      	; 0xf74 <atoi+0x3a>
     f6e:	90 95       	com	r25
     f70:	81 95       	neg	r24
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	08 95       	ret

00000f76 <strcat>:
     f76:	fb 01       	movw	r30, r22
     f78:	dc 01       	movw	r26, r24
     f7a:	0d 90       	ld	r0, X+
     f7c:	00 20       	and	r0, r0
     f7e:	e9 f7       	brne	.-6      	; 0xf7a <strcat+0x4>
     f80:	11 97       	sbiw	r26, 0x01	; 1
     f82:	01 90       	ld	r0, Z+
     f84:	0d 92       	st	X+, r0
     f86:	00 20       	and	r0, r0
     f88:	e1 f7       	brne	.-8      	; 0xf82 <strcat+0xc>
     f8a:	08 95       	ret

00000f8c <strcpy>:
     f8c:	fb 01       	movw	r30, r22
     f8e:	dc 01       	movw	r26, r24
     f90:	01 90       	ld	r0, Z+
     f92:	0d 92       	st	X+, r0
     f94:	00 20       	and	r0, r0
     f96:	e1 f7       	brne	.-8      	; 0xf90 <strcpy+0x4>
     f98:	08 95       	ret

00000f9a <itoa>:
     f9a:	45 32       	cpi	r20, 0x25	; 37
     f9c:	51 05       	cpc	r21, r1
     f9e:	20 f4       	brcc	.+8      	; 0xfa8 <itoa+0xe>
     fa0:	42 30       	cpi	r20, 0x02	; 2
     fa2:	10 f0       	brcs	.+4      	; 0xfa8 <itoa+0xe>
     fa4:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__itoa_ncheck>
     fa8:	fb 01       	movw	r30, r22
     faa:	10 82       	st	Z, r1
     fac:	cb 01       	movw	r24, r22
     fae:	08 95       	ret

00000fb0 <__itoa_ncheck>:
     fb0:	bb 27       	eor	r27, r27
     fb2:	4a 30       	cpi	r20, 0x0A	; 10
     fb4:	31 f4       	brne	.+12     	; 0xfc2 <__itoa_ncheck+0x12>
     fb6:	99 23       	and	r25, r25
     fb8:	22 f4       	brpl	.+8      	; 0xfc2 <__itoa_ncheck+0x12>
     fba:	bd e2       	ldi	r27, 0x2D	; 45
     fbc:	90 95       	com	r25
     fbe:	81 95       	neg	r24
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__utoa_common>

00000fc6 <__mulhi_const_10>:
     fc6:	7a e0       	ldi	r23, 0x0A	; 10
     fc8:	97 9f       	mul	r25, r23
     fca:	90 2d       	mov	r25, r0
     fcc:	87 9f       	mul	r24, r23
     fce:	80 2d       	mov	r24, r0
     fd0:	91 0d       	add	r25, r1
     fd2:	11 24       	eor	r1, r1
     fd4:	08 95       	ret

00000fd6 <__utoa_ncheck>:
     fd6:	bb 27       	eor	r27, r27

00000fd8 <__utoa_common>:
     fd8:	fb 01       	movw	r30, r22
     fda:	55 27       	eor	r21, r21
     fdc:	aa 27       	eor	r26, r26
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	aa 1f       	adc	r26, r26
     fe4:	a4 17       	cp	r26, r20
     fe6:	10 f0       	brcs	.+4      	; 0xfec <__utoa_common+0x14>
     fe8:	a4 1b       	sub	r26, r20
     fea:	83 95       	inc	r24
     fec:	50 51       	subi	r21, 0x10	; 16
     fee:	b9 f7       	brne	.-18     	; 0xfde <__utoa_common+0x6>
     ff0:	a0 5d       	subi	r26, 0xD0	; 208
     ff2:	aa 33       	cpi	r26, 0x3A	; 58
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <__utoa_common+0x20>
     ff6:	a9 5d       	subi	r26, 0xD9	; 217
     ff8:	a1 93       	st	Z+, r26
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	79 f7       	brne	.-34     	; 0xfdc <__utoa_common+0x4>
     ffe:	b1 11       	cpse	r27, r1
    1000:	b1 93       	st	Z+, r27
    1002:	11 92       	st	Z+, r1
    1004:	cb 01       	movw	r24, r22
    1006:	0c 94 05 08 	jmp	0x100a	; 0x100a <strrev>

0000100a <strrev>:
    100a:	dc 01       	movw	r26, r24
    100c:	fc 01       	movw	r30, r24
    100e:	67 2f       	mov	r22, r23
    1010:	71 91       	ld	r23, Z+
    1012:	77 23       	and	r23, r23
    1014:	e1 f7       	brne	.-8      	; 0x100e <strrev+0x4>
    1016:	32 97       	sbiw	r30, 0x02	; 2
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <strrev+0x18>
    101a:	7c 91       	ld	r23, X
    101c:	6d 93       	st	X+, r22
    101e:	70 83       	st	Z, r23
    1020:	62 91       	ld	r22, -Z
    1022:	ae 17       	cp	r26, r30
    1024:	bf 07       	cpc	r27, r31
    1026:	c8 f3       	brcs	.-14     	; 0x101a <strrev+0x10>
    1028:	08 95       	ret

0000102a <_exit>:
    102a:	f8 94       	cli

0000102c <__stop_program>:
    102c:	ff cf       	rjmp	.-2      	; 0x102c <__stop_program>
